https://learning.oreilly.com/library/view/learning-python-testing/9781783553211/
https://learning.oreilly.com/library/view/testing-python-applying/9781118901243/
https://learning.oreilly.com/library/view/python-testing-cookbook/9781849514668/
https://learning.oreilly.com/library/view/python-testing-cookbook/9781787122529/
https://learning.oreilly.com/library/view/python-unit-test/9781484226766/A436414_1_En_3_Chapter.html <= Reffering this


Note:-

https://www.python.org/dev/peps/pep-0008/

https://www.python.org/dev/peps/pep-0206/

https://www.python.org/dev/peps/pep-0256  

https://www.python.org/dev/peps/pep-0257  

https://www.python.org/dev/peps/pep-0258 

https://docs.python.org/3/library/unittest.html

There is called docString which need to comment and put help test under class,method,function of module in python
We use ''' '''- Triple single or double quotes to put it.
When interpretor dcompile module of this file it assign to global doc type of the module which can verify it from <module_name>.<class/function name>.__doc__
we can also get all level of comment text from help(<module_name>.<class/function name>)
(doctest)
This is inbuild module into python which help to interprator test case defined into doc string with python intractive symbol. 
Here doctest library take test condition which defined under >>> and take the input, called the method and compare the output which mention in test case.
finally it produce report to verify it.

test fixtures, automated test discovery, organizing your codebase
unittest came to life as a third-party module PyUnit. PyUnitwas the Python port for JUnit.
Python has nose, pytest, and Nose2 apart from unittest.

The following are the major components of the architecture: 
• Test case class: This is the base class of all the test classes in the test modules. All the test classes are derived from here.
• Test fixtures: These are functions or methods that run before and after blocks of the test code execute.
• Assertions:These functions or methods are used to check the behavior of the component being tested. Most of the xUnit-style frameworks are packed with powerful assertion methods.
• Test suite: This is the collection or group of related tests that can be executed or scheduled to be executed together.
• Test runner: This is the program or block of code that runs the test suite.
• Test result formatter: This formats the test results to produce the output of test execution in various human readable formats like plaintext, HTML, and XML.

Multiple Test Classes Within the Same Test File/Module
Verbosity Control 
	if __name__ == '__main__':
        unittest.main(verbosity=2)
-----------------------------******---------------------
More About fixtures
.In setUpModule()
#This need @classmethod
In setUpClass(cls)..

In SetUp(self)..
In test_case01(self)..

In tearDown(self)...

In SetUp(self)..
In test_case02

In tearDown(self)...
#This need @classmethod
In tearDownClass(cls)...
In tearDownModule()
-----------------------------******---------------------
#To run unit test from command line without unittest's main method
python -m unittest test_module06 -v
-----------------------------******---------------------
python3 -m unittest -v test_module04
python3 -m unittest -v test_module04.TestClass04
python3 -m unittest -v test_module04.TestClass05.test_case01

Listing All the Command-Line Options and Help 
You can list all the command line options of unittest using the -h command-line option. Run the following command:
python3 -m unittest -h

The following is the output: usage: python3 -m unittest [-h] [-v] [-q] [-f] [-c] [-b] [tests [tests ...]]
Examples:

  python3 -m unittest test_module               - run tests from test_module

  python3 -m unittest module.TestClass          - run tests from module.TestClass

  python3 -m unittest module.Class.test_method  - run specified test method


usage: python3-m unittest discover [-h] [-v] [-q] [-f] [-c] [-b] [-s START] [-p PATTERN] [-t TOP]


optional arguments:

  -h, --help            show this help message and exit

  -v, --verbose         Verbose output

  -q, --quiet           Quiet output

  -f, --failfast        Stop on first fail or error

  -c, --catch           Catch ctrl-C and display results so far

  -b, --buffer          Buffer stdout and stderr during tests

  -s START, --start-directory START

                        Directory to start discovery ('.' default)

  -p PATTERN, --pattern PATTERN

                        Pattern to match tests ('test*.py' default)

  -t TOP, --top-level-directory TOP

                        Top level directory of project (defaults to start directory)

For test discovery all test modules must be importable from the top level directory of the project.
-------------------------------------------------------------------------------------------------------
To bundle modules into one package. we need to create one __init__.py file and add all=["module-1 name",...module-n name]
to run the code from current directory, fire these command :-
python3 -m unittest -v test.test_module04
python3 -m unittest -v test.test_module04.TestClass04
------------*******----------------------------------
Organizing the Code 
Placing the Development and Test Code in a Single Directory 
Placing the Development and Test Code in Separate Directories 
	Note:-mypackage moduleis not visible from the test directory, It lives not in the test directory, but in the chapter03 directory. 
	This module cannot be executed from the test directory.
Test Discovery
test discovery automatically finds and runs all the tests in a project directory
	python3 -m unittest discover
	python3 -m unittest discover -v
-----------------*******------------------------------
•In order to be compatible with test discovery, all of the test files must be either modules or packages importable from the top-level directory of the project.
•By default, the test discovery always starts from the current directory.
•By default, test discovery always searches for test*.py patterns in the filenames
------------------------------------------------------
Assertionsin unittest


Method Checks That 
assertEqual(a, b)  a == b
assertNotEqual(a, b)  a != b
assertTrue(x)  bool(x) is True
assertFalse(x)  bool(x) is False
assertIs(a, b)  a is b
assertIsNot(a, b)  a is not b
assertIsNone(x)  x is None
assertIsNotNone(x)  x is not None
assertIn(a, b)  a in b
assertNotIn(a, b)  a not in b
assertIsInstance(a, b)  isinstance(a, b)
assertNotIsInstance(a, b)  not isinstance(a, b)
assertAlmostEqual(a, b)  round(a-b, 7) == 0
assertNotAlmostEqual(a, b)  round(a-b, 7) != 0
assertGreater(a, b)  a > b
assertGreaterEqual(a, b)  a >= b
assertLess(a, b)  a < b
assertLessEqual(a, b)  a <= b
assertRegexpMatches(s, r)  r.search(s)
assertNotRegexpMatches(s, r)  not r.search(s) 
assertItemsEqual(a, b)  sorted(a) == sorted(b)
assertDictContainsSubset(a, b)  all the key/value pairs in a exist in b
assertMultiLineEqual(a, b)  strings
assertSequenceEqual(a, b)  sequences
assertListEqual(a, b)  lists
assertTupleEqual(a, b)  tuples
assertSetEqual(a, b)  sets or frozensets
assertDictEqual(a, b)  dicts
----------------------------------------------------------------------------
Other Useful Methods
self.id() returns the name of the method 
self.shortDescription() returns the description of the method.
self.fail() method is to have a method that explicitly fails a test 
Skipping tests
	• unittest.skip(reason): Unconditionally skips the decorated test. reason should describe why the test is being skipped.
	• unittest.skipIf(condition, reason): Skips the decorated test if condition is true.
	• unittest.skipUnless(condition, reason): Skips the decorated test unless condition is true.
	• unittest.expectedFailure(): Marks the test as an expected failure. If the test fails when it runs, the test is not counted as a failure

import sys
import unittest

class TestClass13(unittest.TestCase):
    @unittest.skip("demonstrating unconditional skipping")
    def test_case01(self):
        self.fail("FATAL")
    @unittest.skipUnless(sys.platform.startswith("win"), "requires Windows")
    def test_case02(self):
        # Windows specific testing code
        pass
    @unittest.skipUnless(sys.platform.startswith("linux"), "requires Linux")
    def test_case03(self):
        # Linux specific testing code
        pass
---------------------------------------------------------------------------------
Exceptions in the Test Case
	raise Exception
assertRaises() :-
	The assertRaises() method is used to check if the code block raises the exception mentioned in assertRaises().
	If the code raises the exception then the test passes; otherwise, it fails.
def add2(self, x, y):
	number_types = (int, float, complex)
	if isinstance(x, number_types) and isinstance(y, number_types):
		return x + y
	else:
		raise ValueError
to check => self.assertRaises(ValueError, calc.add2, 2, 'two')
assertRaises() is very useful in writing negative test cases, such as when you need to check the behavior of the API against invalid arguments
